/**
 * Tipos para m√≥dulo Events - Sistema de Eventos Escolares Angolanos
 * Alinhado com backend NestJS + Prisma
 */

// Tipos de eventos escolares
export type EventType = 'PALESTRA' | 'PASSEIO' | 'REUNIAO' | 'FORMATURA' | 'OUTRO';

// Status de eventos
export type EventStatus = 'PLANNED' | 'ONGOING' | 'COMPLETED' | 'CANCELLED';

// Interface principal do evento
export interface Event {
  id: string;
  title: string;
  description: string;
  date: string; // ISO string
  location: string;
  type: EventType;
  createdAt: string;
  updatedAt: string;
  participants?: EventParticipation[];
  totalParticipants?: number;
  totalPresent?: number;
}

// Interface de participa√ß√£o no evento
export interface EventParticipation {
  id: string;
  eventId: string;
  studentId: string;
  presence: boolean;
  note?: string;
  createdAt: string;
  student?: {
    id: string;
    firstName: string;
    lastName: string;
    studentNumber: string;
    schoolClass?: {
      id: string;
      name: string;
      academicYear: string;
    };
  };
  event?: Event;
}

// Interface para criar novo evento
export interface CreateEventDto {
  title: string;
  description: string;
  date: string; // ISO string
  location: string;
  type: EventType;
}

// Interface para atualizar evento
export interface UpdateEventDto {
  title?: string;
  description?: string;
  date?: string;
  location?: string;
  type?: EventType;
}

// Interface para registrar participa√ß√£o
export interface RegisterParticipationDto {
  studentId: string;
  note?: string;
}

// Interface para registrar m√∫ltiplas participa√ß√µes
export interface RegisterMultipleParticipationsDto {
  studentIds: string[];
  note?: string;
}

// Interface para registrar turma inteira
export interface RegisterClassDto {
  classId: string;
  note?: string;
}

// Interface para atualizar participa√ß√£o
export interface UpdateParticipationDto {
  presence?: boolean;
  note?: string;
}

// Interface para atualizar presen√ßa em lote
export interface BatchUpdatePresenceDto {
  participations: Array<{
    participationId: string;
    presence: boolean;
  }>;
}

// Interface para filtros de eventos
export interface EventFilters {
  title?: string;
  type?: EventType;
  location?: string;
  startDate?: string;
  endDate?: string;
  futureOnly?: boolean;
  pastOnly?: boolean;
  page?: number;
  limit?: number;
  sortBy?: 'date' | 'title' | 'type';
  sortOrder?: 'asc' | 'desc';
}

// Interface para filtros de participa√ß√µes
export interface ParticipationFilters {
  eventId?: string;
  studentId?: string;
  presence?: boolean;
  page?: number;
  limit?: number;
}

// Interface para lista paginada de eventos
export interface EventListResponse {
  events: Event[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

// Interface para lista paginada de participa√ß√µes
export interface ParticipationListResponse {
  participants: EventParticipation[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
  stats?: {
    totalParticipants: number;
    totalPresent: number;
    totalAbsent: number;
  };
}

// Interface para detalhes do evento
export interface EventDetails extends Event {
  totalParticipants: number;
  totalPresent: number;
  participants: EventParticipation[];
}

// Interface para estat√≠sticas de eventos
export interface EventStats {
  totalEvents: number;
  upcomingEvents: number;
  completedEvents: number;
  totalParticipations: number;
  averageAttendance: number;
  mostPopularEvent?: {
    event: Event;
    participantCount: number;
  };
  eventsByType: Array<{
    type: EventType;
    count: number;
  }>;
  monthlyEvents: Array<{
    month: string;
    count: number;
  }>;
}

// Interface para hist√≥rico de eventos do aluno
export interface StudentEventHistory {
  student: {
    id: string;
    name: string;
    studentNumber: string;
    className?: string;
  };
  summary: {
    totalEvents: number;
    attended: number;
    missed: number;
    attendanceRate: number;
  };
  events: EventParticipation[];
}

// Labels traduzidos para portugu√™s angolano
export const EventTypeLabels: Record<EventType, string> = {
  PALESTRA: 'Palestra',
  PASSEIO: 'Passeio Escolar',
  REUNIAO: 'Reuni√£o',
  FORMATURA: 'Formatura',
  OUTRO: 'Outro',
};

// √çcones para tipos de eventos
export const EventTypeIcons: Record<EventType, string> = {
  PALESTRA: 'üéì',
  PASSEIO: 'üöå',
  REUNIAO: 'üë•',
  FORMATURA: 'üéì',
  OUTRO: 'üìÖ',
};

// Cores para badges de tipos de eventos
export const EventTypeColors: Record<EventType, string> = {
  PALESTRA: 'bg-blue-100 text-blue-800 border-blue-200',
  PASSEIO: 'bg-green-100 text-green-800 border-green-200',
  REUNIAO: 'bg-purple-100 text-purple-800 border-purple-200',
  FORMATURA: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  OUTRO: 'bg-gray-100 text-gray-800 border-gray-200',
};

// Labels para status de eventos (calculado pelo frontend)
export const EventStatusLabels = {
  UPCOMING: 'Pr√≥ximo',
  TODAY: 'Hoje',
  ONGOING: 'Em Andamento',
  COMPLETED: 'Conclu√≠do',
  PAST: 'Passado',
} as const;

// Cores para badges de status
export const EventStatusColors = {
  UPCOMING: 'bg-blue-100 text-blue-800 border-blue-200',
  TODAY: 'bg-orange-100 text-orange-800 border-orange-200',
  ONGOING: 'bg-green-100 text-green-800 border-green-200',
  COMPLETED: 'bg-green-100 text-green-800 border-green-200',
  PAST: 'bg-gray-100 text-gray-800 border-gray-200',
} as const;

// Locais comuns para eventos em escolas angolanas
export const COMMON_EVENT_LOCATIONS = [
  'Audit√≥rio Principal',
  'Sala de Confer√™ncias',
  'P√°tio da Escola',
  'Quadra de Esportes',
  'Biblioteca',
  'Laborat√≥rio de Ci√™ncias',
  'Sala de Aula Magna',
  'Refeit√≥rio',
  'Sala de Professores',
  '√Årea Externa',
  'Campo de Futebol',
  'Teatro da Escola',
  'Sala de Artes',
  'Laborat√≥rio de Inform√°tica',
  'Externo - Local a definir',
] as const;

// Hor√°rios t√≠picos para eventos escolares
export const COMMON_EVENT_TIMES = [
  { label: 'Manh√£ - 08:00', value: '08:00' },
  { label: 'Manh√£ - 09:00', value: '09:00' },
  { label: 'Manh√£ - 10:00', value: '10:00' },
  { label: 'Manh√£ - 11:00', value: '11:00' },
  { label: 'Tarde - 14:00', value: '14:00' },
  { label: 'Tarde - 15:00', value: '15:00' },
  { label: 'Tarde - 16:00', value: '16:00' },
  { label: 'Tarde - 17:00', value: '17:00' },
  { label: 'Noite - 18:00', value: '18:00' },
  { label: 'Noite - 19:00', value: '19:00' },
] as const;

// Helper para determinar status do evento baseado na data
export const getEventStatus = (eventDate: string): keyof typeof EventStatusLabels => {
  const event = new Date(eventDate);
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const eventDay = new Date(event.getFullYear(), event.getMonth(), event.getDate());
  
  const diffTime = eventDay.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays > 0) return 'UPCOMING';
  if (diffDays === 0) {
    // Verifica se est√° em andamento (assumindo 2h de dura√ß√£o)
    const eventTime = event.getTime();
    const currentTime = now.getTime();
    const twoHours = 2 * 60 * 60 * 1000;
    
    if (currentTime >= eventTime && currentTime <= eventTime + twoHours) {
      return 'ONGOING';
    }
    if (currentTime < eventTime) return 'TODAY';
    return 'COMPLETED';
  }
  return 'PAST';
};

// Helper para formatar data do evento
export const formatEventDate = (date: string): string => {
  const eventDate = new Date(date);
  return eventDate.toLocaleDateString('pt-AO', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Helper para formatar hora do evento
export const formatEventTime = (date: string): string => {
  const eventDate = new Date(date);
  return eventDate.toLocaleTimeString('pt-AO', {
    hour: '2-digit',
    minute: '2-digit',
  });
};

// Helper para formatar nome do participante
export const formatParticipantName = (participation: EventParticipation): string => {
  if (participation.student) {
    return `${participation.student.firstName} ${participation.student.lastName}`;
  }
  return 'Participante Desconhecido';
};

// Helper para formatar turma do participante
export const formatParticipantClass = (participation: EventParticipation): string => {
  if (participation.student?.schoolClass) {
    return `${participation.student.schoolClass.name} (${participation.student.schoolClass.academicYear})`;
  }
  return 'Sem Turma';
};

// Helper para calcular taxa de presen√ßa
export const calculateAttendanceRate = (participants: EventParticipation[]): number => {
  if (participants.length === 0) return 0;
  const present = participants.filter(p => p.presence).length;
  return Math.round((present / participants.length) * 100);
};

// Helper para verificar se evento pode ser editado
export const canEditEvent = (eventDate: string): boolean => {
  const event = new Date(eventDate);
  const now = new Date();
  return event > now; // S√≥ pode editar eventos futuros
};

// Helper para verificar se evento pode ser deletado
export const canDeleteEvent = (event: Event): boolean => {
  const eventDate = new Date(event.date);
  const now = new Date();
  const hasParticipants = (event.totalParticipants || 0) > 0;
  
  // N√£o pode deletar se j√° passou ou tem participantes
  return eventDate > now && !hasParticipants;
};

// Helper para verificar se participa√ß√£o pode ser removida
export const canRemoveParticipation = (eventDate: string): boolean => {
  const event = new Date(eventDate);
  const now = new Date();
  return event > now; // S√≥ pode remover de eventos futuros
};

// Helper para validar data do evento
export const validateEventDate = (date: string): string[] => {
  const errors: string[] = [];
  const eventDate = new Date(date);
  const now = new Date();
  
  if (isNaN(eventDate.getTime())) {
    errors.push('Data deve ser uma data v√°lida');
  }
  
  if (eventDate <= now) {
    errors.push('Data deve ser no futuro');
  }
  
  // Verifica se n√£o √© muito longe no futuro (1 ano)
  const oneYearFromNow = new Date();
  oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);
  
  if (eventDate > oneYearFromNow) {
    errors.push('Data n√£o pode ser superior a 1 ano no futuro');
  }
  
  return errors;
};

// Helper para gerar hor√°rio completo do evento
export const generateEventDateTime = (date: string, time: string): string => {
  const [hours, minutes] = time.split(':');
  const eventDate = new Date(date);
  eventDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
  return eventDate.toISOString();
};

// Configura√ß√µes do sistema de eventos
export const EVENTS_CONFIG = {
  maxTitleLength: 100,
  minTitleLength: 3,
  maxDescriptionLength: 1000,
  minDescriptionLength: 10,
  maxLocationLength: 200,
  minLocationLength: 3,
  defaultEventDuration: 2, // horas
  maxFutureMonths: 12,
  reminderDaysBefore: 3,
} as const;

// Interface para configura√ß√µes personaliz√°veis
export interface EventsSettings {
  allowPastEvents: boolean;
  requireApproval: boolean;
  maxParticipants: number;
  enableReminders: boolean;
  reminderDaysBefore: number;
  allowSelfRegistration: boolean;
  enableWaitingList: boolean;
  defaultEventDuration: number;
}

// Interface para relat√≥rio de eventos
export interface EventReport {
  period: {
    startDate: string;
    endDate: string;
  };
  summary: {
    totalEvents: number;
    completedEvents: number;
    totalParticipations: number;
    averageAttendance: number;
  };
  eventsByType: Array<{
    type: EventType;
    count: number;
    attendance: number;
  }>;
  topEvents: Array<{
    event: Event;
    participantCount: number;
    attendanceRate: number;
  }>;
  trends: {
    monthlyGrowth: number;
    attendanceImprovement: number;
  };
}

// Interface para notifica√ß√£o de evento
export interface EventNotification {
  id: string;
  eventId: string;
  userId: string;
  userType: 'STUDENT' | 'TEACHER' | 'PARENT';
  type: 'REMINDER' | 'CANCELLATION' | 'UPDATE' | 'INVITATION';
  message: string;
  sent: boolean;
  scheduledFor: string;
  createdAt: string;
}

// Meses do ano em portugu√™s
export const MONTHS_PT = [
  'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
  'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
] as const;

// Helper para obter nome do m√™s
export const getMonthName = (month: number): string => {
  return MONTHS_PT[month - 1] || '';
};

// Dias da semana em portugu√™s
export const WEEKDAYS_PT = [
  'Domingo', 'Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 
  'Quinta-feira', 'Sexta-feira', 'S√°bado'
] as const;

// Helper para obter nome do dia da semana
export const getWeekdayName = (day: number): string => {
  return WEEKDAYS_PT[day] || '';
};

// Helper para calcular pr√≥ximos eventos
export const getUpcomingEvents = (events: Event[], days: number = 7): Event[] => {
  const now = new Date();
  const futureDate = new Date();
  futureDate.setDate(futureDate.getDate() + days);
  
  return events
    .filter(event => {
      const eventDate = new Date(event.date);
      return eventDate >= now && eventDate <= futureDate;
    })
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
};

// Helper para agrupar eventos por m√™s
export const groupEventsByMonth = (events: Event[]): Record<string, Event[]> => {
  return events.reduce((acc, event) => {
    const eventDate = new Date(event.date);
    const monthKey = `${eventDate.getFullYear()}-${eventDate.getMonth() + 1}`;
    
    if (!acc[monthKey]) {
      acc[monthKey] = [];
    }
    acc[monthKey].push(event);
    
    return acc;
  }, {} as Record<string, Event[]>);
};