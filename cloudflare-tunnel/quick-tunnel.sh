#!/bin/bash
# Quick Tunnel - Cloudflare com dom√≠nio tempor√°rio (.trycloudflare.com)
# N√£o precisa de login, dom√≠nio ou configura√ß√£o DNS!

echo "üöÄ Synexa-SIS - Quick Tunnel (Dom√≠nio Tempor√°rio)"
echo "================================================"
echo ""

# Verificar se cloudflared est√° instalado
if ! command -v cloudflared &> /dev/null; then
    echo "‚ùå cloudflared n√£o encontrado!"
    echo ""
    echo "Instale primeiro:"
    echo "# Ubuntu/Linux:"
    echo "sudo apt install cloudflared"
    echo ""
    echo "# Windows:"
    echo "choco install cloudflared"
    echo ""
    echo "# macOS:"
    echo "brew install cloudflared"
    exit 1
fi

# Verificar se os servi√ßos est√£o rodando
echo "üîç Verificando servi√ßos locais..."

if ! curl -s -f http://localhost:3000 > /dev/null 2>&1; then
    echo "‚ùå Backend n√£o est√° rodando na porta 3000"
    echo "üí° Execute: docker-compose up escola-backend"
    exit 1
fi
echo "‚úÖ Backend (porta 3000) - OK"

if ! curl -s -f http://localhost:3001 > /dev/null 2>&1; then
    echo "‚ùå Frontend n√£o est√° rodando na porta 3001"  
    echo "üí° Execute: npm run dev"
    exit 1
fi
echo "‚úÖ Frontend (porta 3001) - OK"

echo ""
echo "üåê Iniciando tunnels com dom√≠nios tempor√°rios..."
echo "‚ö†Ô∏è  ATEN√á√ÉO: URLs mudam a cada execu√ß√£o!"
echo ""

# Fun√ß√£o para capturar e exibir a URL do tunnel
start_tunnel() {
    local port=$1
    local service=$2
    
    echo "üîó Iniciando tunnel para $service (porta $port)..."
    
    # Executar cloudflared e capturar a URL
    cloudflared tunnel --url http://localhost:$port 2>&1 | while IFS= read -r line; do
        # Procurar pela linha que cont√©m a URL do tunnel
        if [[ $line == *"trycloudflare.com"* ]] && [[ $line == *"https://"* ]]; then
            # Extrair apenas a URL
            url=$(echo "$line" | grep -oP 'https://[a-zA-Z0-9\-]+\.trycloudflare\.com')
            if [[ -n $url ]]; then
                echo ""
                echo "üéâ $service est√° dispon√≠vel em:"
                echo "   $url"
                
                if [[ $service == "Backend" ]]; then
                    echo "   Swagger: $url/api"
                    echo "   Health: $url/health"
                fi
                echo ""
            fi
        fi
        # Mostrar outros logs importantes
        if [[ $line == *"ERR"* ]] || [[ $line == *"error"* ]]; then
            echo "‚ùå $line"
        fi
    done &
    
    return $!
}

# Iniciar ambos os tunnels em paralelo
echo "üöß Iniciando tunnel para BACKEND..."
cloudflared tunnel --url http://localhost:3000 &
BACKEND_PID=$!

echo "üöß Iniciando tunnel para FRONTEND..."
cloudflared tunnel --url http://localhost:3001 &
FRONTEND_PID=$!

echo ""
echo "‚è≥ Aguarde alguns segundos para os tunnels inicializarem..."
echo "üîó As URLs aparecer√£o abaixo:"
echo ""

# Aguardar e capturar as URLs
sleep 5

echo "üìã RESUMO DOS TUNNELS:"
echo "======================"
echo ""

# Tentar capturar URLs dos logs
echo "üîç Capturando URLs dos tunnels..."
sleep 2

echo ""
echo "‚úÖ Tunnels ativos! Pressione Ctrl+C para parar."
echo ""
echo "üí° Dicas:"
echo "   ‚Ä¢ As URLs s√£o tempor√°rias e mudam a cada execu√ß√£o"
echo "   ‚Ä¢ N√£o precisa de login ou configura√ß√£o DNS"
echo "   ‚Ä¢ Ideal para testes e demonstra√ß√µes"
echo "   ‚Ä¢ Compartilhe as URLs com colegas para testes"
echo ""

# Aguardar interrup√ß√£o do usu√°rio
wait $BACKEND_PID $FRONTEND_PID