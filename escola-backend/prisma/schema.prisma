// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id          String         @id @default(uuid())
  name        String
  email       String         @unique
  birthDate   DateTime
  schoolClass SchoolClass?   @relation("ClassStudents", fields: [classId], references: [id])
  classId     String?
  enrollments Enrollment[]
  grades      Grade[]
  invoices    Invoice[]
  parents     Parent[]       @relation("StudentParents")
  documents   Document[]
  attendances Attendance[]
  uploadedFiles UploadedFile[]
  loans       Loan[]
  createdAt   DateTime       @default(now())

  @@map("students")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role                  Role
  teacher               Teacher?
  messages              Message[]
  communicationMessages CommunicationMessage[] @relation("MessageCreator")
  uploadedFiles         UploadedFile[]
  createdAt             DateTime               @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Teacher {
  id           String         @id @default(uuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?
  subjects     Subject[]      @relation("TeacherSubjects")
  schoolClasses SchoolClass[] @relation("ClassTeachers")
  grades       Grade[]
  attendances  Attendance[]
  uploadedFiles UploadedFile[]
  loans        Loan[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("teachers")
}

model Subject {
  id          String    @id @default(uuid())
  name        String
  description String?
  teachers    Teacher[] @relation("TeacherSubjects")
  grades      Grade[]
  attendances Attendance[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("subjects")
}

model SchoolClass {
  id          String       @id @default(uuid())
  name        String
  year        Int
  shift       Shift
  capacity    Int
  students    Student[]    @relation("ClassStudents")
  teachers    Teacher[]    @relation("ClassTeachers")
  enrollments Enrollment[]
  grades      Grade[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("school_classes")
}

model Enrollment {
  id        String           @id @default(uuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  class     SchoolClass      @relation(fields: [classId], references: [id])
  classId   String
  year      Int
  status    EnrollmentStatus
  createdAt DateTime         @default(now())

  @@map("enrollments")
}

model Grade {
  id        String      @id @default(uuid())
  student   Student     @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject     @relation(fields: [subjectId], references: [id])
  subjectId String
  teacher   Teacher     @relation(fields: [teacherId], references: [id])
  teacherId String
  class     SchoolClass @relation(fields: [classId], references: [id])
  classId   String
  year      Int
  value     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("grades")
}

enum Role {
  ADMIN
  SECRETARIA
  PROFESSOR
  DIRETOR
  PARENT
}

enum Shift {
  MORNING
  AFTERNOON
  EVENING
}

enum EnrollmentStatus {
  ACTIVE
  TRANSFERRED
  CANCELLED
  PENDING
}

model Invoice {
  id           String        @id @default(uuid())
  student      Student       @relation(fields: [studentId], references: [id])
  studentId    String
  amount       Float
  dueDate      DateTime
  status       InvoiceStatus @default(PENDENTE)
  description  String
  month        Int
  year         Int
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("invoices")
}

model Payment {
  id        String      @id @default(uuid())
  invoice   Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  method    PaymentMethod
  reference String?
  paidAt    DateTime    @default(now())
  createdAt DateTime    @default(now())

  @@map("payments")
}

enum InvoiceStatus {
  PENDENTE
  PAGA
  VENCIDA
  CANCELADA
}

enum PaymentMethod {
  DINHEIRO
  TRANSFERENCIA
  MULTIBANCO
  MBWAY
  CARTAO
  CHEQUE
}

model Parent {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  password  String
  students  Student[] @relation("StudentParents")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("parents")
}

model Message {
  id          String      @id @default(uuid())
  title       String
  content     String
  type        MessageType @default(GERAL)
  priority    MessagePriority @default(NORMAL)
  targetRole  String?     // Se for para um role específico
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  published   Boolean     @default(false)
  publishedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("messages")
}

enum MessageType {
  GERAL
  ACADEMICO
  FINANCEIRO
  EVENTO
  URGENTE
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageAudience {
  PARENTS
  TEACHERS
  ALL_STAFF
  SPECIFIC_CLASS
  INDIVIDUAL
  GROUP
}

model Document {
  id          String       @id @default(uuid())
  student     Student      @relation(fields: [studentId], references: [id])
  studentId   String
  type        DocumentType
  filename    String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("documents")
}

enum DocumentType {
  CERTIFICADO
  DECLARACAO
  HISTORICO
  FATURA
}

model CommunicationMessage {
  id          String             @id @default(uuid())
  title       String
  content     String
  priority    MessagePriority    @default(NORMAL)
  audience    MessageAudience[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String             // ID do usuário que criou
  creator     User               @relation("MessageCreator", fields: [createdBy], references: [id])
  readBy      Json?              // Array de userIds que já leram
  isDeleted   Boolean            @default(false)
  targetUsers String[]           // IDs específicos quando audience é INDIVIDUAL/GROUP
  expiresAt   DateTime?          // Data de expiração da mensagem
  
  @@map("communication_messages")
}


model Attendance {
  id        String         @id @default(uuid())
  date      DateTime       @db.Date
  student   Student        @relation(fields: [studentId], references: [id])
  studentId String
  class     SchoolClass    @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject        @relation(fields: [subjectId], references: [id])
  subjectId String
  teacher   Teacher        @relation(fields: [teacherId], references: [id])
  teacherId String
  present   Boolean        @default(true)
  justified Boolean        @default(false)
  note      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  createdBy String         // ID do usuário que registrou

  @@unique([date, studentId, subjectId]) // Evita duplicação
  @@map("attendances")
}

model UploadedFile {
  id           String   @id @default(uuid())
  originalName String
  storedName   String
  path         String
  mimeType     String
  size         Int
  type         FileType
  studentId    String?
  teacherId    String?
  uploaderId   String
  student      Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher      Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploaderId], references: [id])
  createdAt    DateTime @default(now())

  @@index([studentId])
  @@index([teacherId])
  @@map("uploaded_files")
}

enum FileType {
  MATRICULA
  ATESTADO
  AVALIACAO
  HISTORICO
  EXAME_MEDICO
  OUTRO
}

model Book {
  id        String   @id @default(uuid())
  title     String
  author    String
  isbn      String   @unique
  copies    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loans     Loan[]

  @@map("books")
}

model Loan {
  id         String     @id @default(uuid())
  bookId     String
  studentId  String?
  teacherId  String?
  status     LoanStatus @default(ACTIVE)
  loanDate   DateTime   @default(now())
  dueDate    DateTime
  returnDate DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  book       Book     @relation(fields: [bookId], references: [id])
  student    Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher    Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([bookId])
  @@index([studentId])
  @@index([teacherId])
  @@index([status])
  @@map("loans")
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}