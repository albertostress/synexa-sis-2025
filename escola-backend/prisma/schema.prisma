// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  birthDate   DateTime
  schoolClass SchoolClass? @relation("ClassStudents", fields: [classId], references: [id])
  classId     String?
  enrollments Enrollment[]
  grades      Grade[]
  invoices    Invoice[]
  createdAt   DateTime     @default(now())

  @@map("students")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  teacher   Teacher?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Teacher {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?
  subjects     Subject[]     @relation("TeacherSubjects")
  schoolClasses SchoolClass[] @relation("ClassTeachers")
  grades       Grade[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("teachers")
}

model Subject {
  id          String    @id @default(uuid())
  name        String
  description String?
  teachers    Teacher[] @relation("TeacherSubjects")
  grades      Grade[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("subjects")
}

model SchoolClass {
  id          String       @id @default(uuid())
  name        String
  year        Int
  shift       Shift
  capacity    Int
  students    Student[]    @relation("ClassStudents")
  teachers    Teacher[]    @relation("ClassTeachers")
  enrollments Enrollment[]
  grades      Grade[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("school_classes")
}

model Enrollment {
  id        String           @id @default(uuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  class     SchoolClass      @relation(fields: [classId], references: [id])
  classId   String
  year      Int
  status    EnrollmentStatus
  createdAt DateTime         @default(now())

  @@map("enrollments")
}

model Grade {
  id        String      @id @default(uuid())
  student   Student     @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject     @relation(fields: [subjectId], references: [id])
  subjectId String
  teacher   Teacher     @relation(fields: [teacherId], references: [id])
  teacherId String
  class     SchoolClass @relation(fields: [classId], references: [id])
  classId   String
  year      Int
  value     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("grades")
}

enum Role {
  ADMIN
  SECRETARIA
  PROFESSOR
  DIRETOR
}

enum Shift {
  MORNING
  AFTERNOON
  EVENING
}

enum EnrollmentStatus {
  ACTIVE
  TRANSFERRED
  CANCELLED
  PENDING
}

model Invoice {
  id           String        @id @default(uuid())
  student      Student       @relation(fields: [studentId], references: [id])
  studentId    String
  amount       Float
  dueDate      DateTime
  status       InvoiceStatus @default(PENDENTE)
  description  String
  month        Int
  year         Int
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("invoices")
}

model Payment {
  id        String      @id @default(uuid())
  invoice   Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  method    PaymentMethod
  reference String?
  paidAt    DateTime    @default(now())
  createdAt DateTime    @default(now())

  @@map("payments")
}

enum InvoiceStatus {
  PENDENTE
  PAGA
  VENCIDA
  CANCELADA
}

enum PaymentMethod {
  DINHEIRO
  TRANSFERENCIA
  MULTIBANCO
  MBWAY
  CARTAO
  CHEQUE
}