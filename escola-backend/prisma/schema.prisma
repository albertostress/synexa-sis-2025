// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id              String         @id @default(uuid())
  firstName       String
  lastName        String
  gender          Gender
  birthDate       DateTime
  biNumber        String         @unique
  studentNumber   String         @unique
  academicYear    String
  classId         String
  profilePhotoUrl String?

  // Guardian information
  guardianName    String
  guardianPhone   String

  // Address information
  municipality    String
  province        String
  country         String         @default("Angola")
  
  // Parent contact
  parentEmail     String
  parentPhone     String
  
  // New fields
  status          StudentStatus  @default(ATIVO)
  tags            String[]       @default([])

  // Relations
  schoolClass     SchoolClass    @relation("ClassStudents", fields: [classId], references: [id])
  enrollments     Enrollment[]
  grades          Grade[]
  invoices        Invoice[]
  parents         Parent[]       @relation("StudentParents")
  documents       Document[]
  attendances     Attendance[]
  uploadedFiles   UploadedFile[]
  loans           Loan[]
  transport       StudentTransport?
  eventParticipations EventParticipation[]
  notes           StudentNote[]
  timeline        StudentTimeline[]
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([academicYear, classId])
  @@index([province])
  @@index([firstName, lastName])
  @@map("students")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role                  Role
  teacher               Teacher?
  messages              Message[]
  communicationMessages CommunicationMessage[] @relation("MessageCreator")
  uploadedFiles         UploadedFile[]
  studentNotes          StudentNote[]
  studentTimelines      StudentTimeline[]
  createdAt             DateTime               @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Teacher {
  id           String         @id @default(uuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?
  qualification String?
  specialization String?
  experience   Int?
  subjects     Subject[]      @relation("TeacherSubjects")
  schoolClasses SchoolClass[] @relation("ClassTeachers")
  grades       Grade[]
  attendances  Attendance[]
  uploadedFiles UploadedFile[]
  loans        Loan[]
  schedules    Schedule[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("teachers")
}

model Subject {
  id            String            @id @default(uuid())
  name          String
  description   String?
  code          String            @unique
  year          String
  category      SubjectCategory   @default(OBRIGATORIA)
  credits       Int               @default(1)
  workloadHours Int               @default(30)
  isActive      Boolean           @default(true)
  teachers      Teacher[]         @relation("TeacherSubjects")
  grades        Grade[]
  attendances   Attendance[]
  schedules     Schedule[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("subjects")
}

model SchoolClass {
  id          String       @id @default(uuid())
  name        String
  year        Int
  shift       Shift
  capacity    Int
  students    Student[]    @relation("ClassStudents")
  teachers    Teacher[]    @relation("ClassTeachers")
  enrollments Enrollment[]
  grades      Grade[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("school_classes")
}

model Enrollment {
  id        String           @id @default(uuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  class     SchoolClass      @relation(fields: [classId], references: [id])
  classId   String
  year      Int
  status    EnrollmentStatus
  createdAt DateTime         @default(now())

  @@map("enrollments")
}

model Grade {
  id        String      @id @default(uuid())
  student   Student     @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject     @relation(fields: [subjectId], references: [id])
  subjectId String
  teacher   Teacher     @relation(fields: [teacherId], references: [id])
  teacherId String
  class     SchoolClass @relation(fields: [classId], references: [id])
  classId   String
  type      GradeType   // Tipo de avaliação: MAC, NPP, NPT, MT, FAL
  term      Int         // Trimestre: 1, 2, 3
  year      Int
  value     Float       // Nota de 0 a 20 (sistema angolano)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Garantir que cada aluno só tenha uma nota por tipo/disciplina/trimestre/ano
  @@unique([studentId, subjectId, type, term, year])
  @@map("grades")
}

enum GradeType {
  MAC  // Média das Avaliações Contínuas
  NPP  // Nota da Prova do Professor
  NPT  // Nota da Prova Trimestral
  MT   // Média Trimestral
  FAL  // Faltas
}

enum Role {
  ADMIN
  SECRETARIA
  PROFESSOR
  DIRETOR
  PARENT
}

enum Gender {
  MASCULINO
  FEMININO
}

enum Shift {
  MORNING
  AFTERNOON
  EVENING
}

enum SubjectCategory {
  OBRIGATORIA
  OPCIONAL
}

enum EnrollmentStatus {
  ACTIVE
  TRANSFERRED
  CANCELLED
  PENDING
}

model Invoice {
  id           String        @id @default(uuid())
  student      Student       @relation(fields: [studentId], references: [id])
  studentId    String
  amount       Float
  dueDate      DateTime
  status       InvoiceStatus @default(PENDENTE)
  description  String
  month        Int
  year         Int
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("invoices")
}

model Payment {
  id        String      @id @default(uuid())
  invoice   Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  method    PaymentMethod
  reference String?
  paidAt    DateTime    @default(now())
  createdAt DateTime    @default(now())

  @@map("payments")
}

enum InvoiceStatus {
  PENDENTE
  PAGA
  VENCIDA
  CANCELADA
}

enum PaymentMethod {
  DINHEIRO
  TRANSFERENCIA
  MULTIBANCO
  MBWAY
  CARTAO
  CHEQUE
}

model Parent {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  password  String
  students  Student[] @relation("StudentParents")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("parents")
}

model Message {
  id          String      @id @default(uuid())
  title       String
  content     String
  type        MessageType @default(GERAL)
  priority    MessagePriority @default(NORMAL)
  targetRole  String?     // Se for para um role específico
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  published   Boolean     @default(false)
  publishedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("messages")
}

enum MessageType {
  GERAL
  ACADEMICO
  FINANCEIRO
  EVENTO
  URGENTE
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageAudience {
  PARENTS
  TEACHERS
  ALL_STAFF
  SPECIFIC_CLASS
  INDIVIDUAL
  GROUP
}

model Document {
  id          String       @id @default(uuid())
  student     Student      @relation(fields: [studentId], references: [id])
  studentId   String
  type        DocumentType
  filename    String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("documents")
}

enum DocumentType {
  CERTIFICADO
  DECLARACAO
  HISTORICO
  FATURA
}

model CommunicationMessage {
  id          String             @id @default(uuid())
  title       String
  content     String
  priority    MessagePriority    @default(NORMAL)
  audience    MessageAudience[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String             // ID do usuário que criou
  creator     User               @relation("MessageCreator", fields: [createdBy], references: [id])
  readBy      Json?              // Array de userIds que já leram
  isDeleted   Boolean            @default(false)
  targetUsers String[]           // IDs específicos quando audience é INDIVIDUAL/GROUP
  expiresAt   DateTime?          // Data de expiração da mensagem
  
  @@map("communication_messages")
}


model Attendance {
  id        String         @id @default(uuid())
  date      DateTime       @db.Date
  student   Student        @relation(fields: [studentId], references: [id])
  studentId String
  class     SchoolClass    @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject        @relation(fields: [subjectId], references: [id])
  subjectId String
  teacher   Teacher        @relation(fields: [teacherId], references: [id])
  teacherId String
  present   Boolean        @default(true)
  justified Boolean        @default(false)
  note      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  createdBy String         // ID do usuário que registrou

  @@unique([date, studentId, subjectId]) // Evita duplicação
  @@map("attendances")
}

model UploadedFile {
  id           String   @id @default(uuid())
  originalName String
  storedName   String
  path         String
  mimeType     String
  size         Int
  type         FileType
  studentId    String?
  teacherId    String?
  uploaderId   String
  student      Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher      Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploaderId], references: [id])
  createdAt    DateTime @default(now())

  @@index([studentId])
  @@index([teacherId])
  @@map("uploaded_files")
}

enum FileType {
  MATRICULA
  ATESTADO
  AVALIACAO
  HISTORICO
  EXAME_MEDICO
  OUTRO
}

model Book {
  id        String   @id @default(uuid())
  title     String
  author    String
  isbn      String   @unique
  copies    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loans     Loan[]

  @@map("books")
}

model Loan {
  id         String     @id @default(uuid())
  bookId     String
  studentId  String?
  teacherId  String?
  status     LoanStatus @default(ACTIVE)
  loanDate   DateTime   @default(now())
  dueDate    DateTime
  returnDate DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  book       Book     @relation(fields: [bookId], references: [id])
  student    Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher    Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([bookId])
  @@index([studentId])
  @@index([teacherId])
  @@index([status])
  @@map("loans")
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

model TransportRoute {
  id         String     @id @default(uuid())
  name       String
  driverName String
  vehicle    String
  departure  String     // Horário de saída (formato HH:mm)
  returnTime String     // Horário de retorno (formato HH:mm)
  stops      Json?      // Array ordenado com nomes de paragens
  createdAt  DateTime   @default(now())
  students   StudentTransport[]

  @@map("transport_routes")
}

model StudentTransport {
  id        String   @id @default(uuid())
  studentId String   @unique
  routeId   String
  stopName  String
  notes     String?

  student   Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  route     TransportRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([routeId])
  @@map("student_transport")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  type        EventType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants EventParticipation[]

  @@map("events")
}

model EventParticipation {
  id        String   @id @default(uuid())
  eventId   String
  studentId String
  presence  Boolean  @default(false)
  note      String?
  createdAt DateTime @default(now())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, studentId])
  @@index([eventId])
  @@index([studentId])
  @@map("event_participations")
}

enum EventType {
  PALESTRA
  PASSEIO
  REUNIAO
  FORMATURA
  OUTRO
}

model Setting {
  id          String      @id @default(uuid())
  key         String      @unique
  value       String
  description String?
  type        SettingType @default(STRING)
  isPublic    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model SmtpConfig {
  id        String   @id @default(uuid())
  host      String
  port      Int
  secure    Boolean  @default(false)
  user      String
  password  String
  fromName  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("smtp_configs")
}

model Webhook {
  id             String        @id @default(uuid())
  name           String
  url            String
  method         WebhookMethod @default(POST)
  events         String[]
  headers        Json?
  secret         String?
  isActive       Boolean       @default(true)
  retryAttempts  Int           @default(3)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("webhooks")
}

enum WebhookMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model Schedule {
  id         String   @id @default(uuid())
  teacherId  String
  weekday    Weekday
  startTime  String   // formato "08:00"
  endTime    String   // formato "09:30"
  subjectId  String
  
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([teacherId, weekday, startTime])
  @@map("schedules")
}

enum Weekday {
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

enum StudentStatus {
  ATIVO
  TRANSFERIDO
  DESISTENTE
  CONCLUIDO
}

enum NoteType {
  OBSERVACAO
  ELOGIO
  ADVERTENCIA
}

enum TimelineEventType {
  MATRICULA
  MUDANCA_TURMA
  MUDANCA_STATUS
  NOTA_PEDAGOGICA
  DOCUMENTO_ENVIADO
  PAGAMENTO_EFETUADO
  FALTA_JUSTIFICADA
  OUTRO
}

model StudentNote {
  id        String    @id @default(uuid())
  studentId String
  content   String
  type      NoteType
  authorId  String
  
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id])
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([studentId])
  @@map("student_notes")
}

model StudentTimeline {
  id          String             @id @default(uuid())
  studentId   String
  eventType   TimelineEventType
  title       String
  description String
  metadata    Json?
  userId      String?
  
  student     Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user        User?              @relation(fields: [userId], references: [id])
  
  createdAt   DateTime           @default(now())
  
  @@index([studentId, createdAt])
  @@map("student_timeline")
}