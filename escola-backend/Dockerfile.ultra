# Dockerfile ultra-otimizado para <200MB
FROM node:18-alpine AS deps
RUN apk add --no-cache openssl
WORKDIR /app
COPY package*.json ./
# Instalar apenas prod dependencies com flags de otimização
RUN npm install --omit=dev --no-audit --no-fund --legacy-peer-deps && \
    npm cache clean --force && \
    rm -rf /root/.npm

FROM node:18-alpine AS builder
RUN apk add --no-cache openssl
WORKDIR /app
COPY package*.json ./
RUN npm install --legacy-peer-deps
COPY prisma ./prisma/
COPY src ./src/
COPY tsconfig*.json ./
# Build e gerar Prisma client
RUN npx prisma generate && npm run build

FROM node:18-alpine AS runtime
RUN apk add --no-cache openssl

WORKDIR /app

# Copiar apenas dependências de produção
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./

# Copiar build e schema
COPY --from=builder /app/dist ./dist  
COPY --from=builder /app/prisma ./prisma

# Gerar client final e limpar engines desnecessários
RUN npx prisma generate && \
    rm -rf node_modules/@prisma/engines/migration-engine* && \
    rm -rf node_modules/@prisma/engines/introspection-engine* && \
    rm -rf node_modules/@prisma/engines/prisma-fmt* && \
    rm -rf node_modules/@prisma/client/runtime/library* && \
    find node_modules -name "*.d.ts" -type f -delete && \
    find node_modules -name "*.map" -type f -delete && \
    rm -rf /tmp/* /root/.npm /root/.cache && \
    npm cache clean --force

COPY entrypoint-prod.sh ./
RUN chmod +x entrypoint-prod.sh

ENV NODE_ENV=production
ENV PORT=3000

EXPOSE 3000
CMD ["./entrypoint-prod.sh"]