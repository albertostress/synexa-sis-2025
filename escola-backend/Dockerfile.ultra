# Dockerfile Ultra-Otimizado - Produção super leve
# Multi-stage build para imagem mínima

# STAGE 1: Build
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar apenas arquivos necessários para build
COPY package.json ./
COPY prisma ./prisma/

# Instalar TODAS as dependências para build
RUN npm install --legacy-peer-deps && \
    npm cache clean --force

# Gerar Prisma Client
RUN npx prisma generate

# Copiar código fonte
COPY src ./src/
COPY tsconfig.json ./

# Build da aplicação
RUN npm run build

# Remover devDependencies após build
RUN npm prune --production

# STAGE 2: Produção (imagem final ultra-leve)
FROM node:18-alpine AS production

# Instalar apenas openssl (necessário para Prisma)
RUN apk add --no-cache openssl

WORKDIR /app

# Copiar APENAS o necessário do stage de build
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma
COPY package.json ./

# Remover arquivos desnecessários
RUN rm -rf /tmp/* /var/cache/apk/* && \
    npm prune --production

# Variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=3000
ENV DISABLE_PDF_GENERATION=true

# Usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001
USER nestjs

EXPOSE 3000

# Comando otimizado para produção
CMD ["node", "dist/main"]