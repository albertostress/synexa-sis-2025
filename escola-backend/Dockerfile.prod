# Multi-stage build para produção otimizada
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar package.json para instalar dependências
COPY package*.json ./
COPY prisma ./prisma/

# Instalar todas as dependências (incluindo dev para build)
RUN npm install --legacy-peer-deps

# Gerar Prisma Client
RUN npx prisma generate

# Copiar código fonte e build
COPY src ./src/
COPY tsconfig*.json ./
RUN npm run build

# Stage de produção - imagem final leve
FROM node:18-alpine AS production

# Instalar apenas openssl (necessário para Prisma)
RUN apk add --no-cache openssl

WORKDIR /app

# Copiar package.json e instalar apenas dependências de produção
COPY package*.json ./
RUN npm install --omit=dev --legacy-peer-deps && \
    npm cache clean --force

# Copiar Prisma schema e gerar client para produção
COPY prisma ./prisma/
RUN npx prisma generate && \
    rm -rf node_modules/@prisma/engines/migration-engine* && \
    rm -rf node_modules/@prisma/engines/introspection-engine* && \
    rm -rf node_modules/@prisma/engines/prisma-fmt* && \
    rm -rf node_modules/@types && \
    rm -rf node_modules/typescript && \
    rm -rf node_modules/@typescript-eslint && \
    find node_modules -name "*.d.ts" -type f -delete && \
    find node_modules -name "*.map" -type f -delete && \
    find node_modules -name "*.test.js" -type f -delete && \
    find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "*.md" -type f -delete && \
    rm -rf /tmp/* /root/.npm /root/.cache /usr/share/man && \
    npm cache clean --force

# Copiar build da aplicação do stage anterior
COPY --from=builder /app/dist ./dist

# Copiar entrypoint
COPY entrypoint-prod.sh ./
RUN chmod +x entrypoint-prod.sh

# Variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=3000

# Rodar como root para evitar problemas de permissão no desenvolvimento
# Em produção, usar usuário não-root

EXPOSE 3000

# Usar entrypoint customizado
CMD ["./entrypoint-prod.sh"]